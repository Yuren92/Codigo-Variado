************** NOMBRE ***************
fmod NATURAL is

************** CONJUNTOS ************
 protecting BOOL .
 sort N .
 sort NoN .
 subsort NoN < N .

************** SINTAXIS *************
   op cero : -> N .
   op sucesor : N -> N .
   op suma : N N -> N .
   op esCero : N -> Bool .
   op esIgual : N N -> Bool .
   op producto : N N -> N .
   op potencia : N N -> N .
   op factorial : N -> N .
   op predecesor : N -> N .
   op resta : N N -> N .
   op diferencia : N N -> N .
   op difUno : N N -> Bool .
   op esMenor : N N -> Bool .
   op esMenorIgual : N N -> Bool .
   op esMayor : N N -> Bool .
   op esMayorIgual : N N -> Bool .
   op maximo : N N -> N .
   op minimo : N N -> N .
   op division : N N -> N .
   op modulo : N N -> N .
   op mitad : N -> N .
   op esPar : N -> Bool .
 
 op NODEFINIDO : -> NoN .
 op INFINITO : -> NoN .
 op NEGATIVO : -> NoN .

************** SEMANTICA ************
 var n m : N .

   eq suma(cero, n) = n .
   eq suma(sucesor(m), n) = sucesor(suma(m, n)) .
   eq esCero(cero) = true .
   eq esCero(sucesor(n)) = false .
   eq esIgual(cero, n) = esCero(n) .
   eq esIgual(sucesor(n), cero) = false .
   eq esIgual(sucesor(n), sucesor(m)) = esIgual(n, m) .
   eq producto(cero, n) = cero .
   eq producto(sucesor(n), m) = suma(m,producto(n,m)) .
   eq potencia(cero, cero) = NODEFINIDO .
   eq potencia(cero, n) = cero .
   eq potencia(n, cero) = sucesor(cero) .
   eq potencia(n, sucesor(m)) = producto(n, potencia(n,m)) .
   eq factorial(cero) = sucesor(cero) .
   eq factorial(sucesor(n)) = producto(sucesor(n), factorial(n)) .
   eq predecesor(NEGATIVO) = NEGATIVO .
   eq predecesor(cero) = NEGATIVO .
   eq predecesor(sucesor(n)) = n .
   eq resta(cero, cero) = cero .
   eq resta(cero, n) = NEGATIVO .
   eq resta(n, cero) = n .
   eq resta(n, sucesor(m)) = predecesor(resta(n,m)) .
   eq diferencia(n, m) = if resta(n, m) == NEGATIVO then resta(m,n) else resta(n,m) fi .
   eq difUno(n, m) = if diferencia(n, m) == sucesor(cero) or diferencia(n, m) == cero then true else false fi .
   eq esMenor(n, m) = if resta(n, m) == NEGATIVO then true else false fi .
   eq esMenorIgual(n, m) = if resta(n, m) == NEGATIVO or resta(n, m) == cero then true else false fi .
   eq esMayor(n, m) = if resta(m, n) == NEGATIVO then true else false fi .
   eq esMayorIgual(n, m) = if resta(m, n) == NEGATIVO or resta(m, n) == cero then true else false fi .  
   eq maximo(n, m) = if resta(n, m) == NEGATIVO then m else n fi .
   eq minimo(n, m) = if resta(n, m) == NEGATIVO then n else m fi .
   eq division(cero, cero) = NODEFINIDO .
   eq division(cero, n) = cero .
   eq division(n, cero) = INFINITO .
   eq division(n, m) = if resta(n, m) == NEGATIVO then cero else sucesor(division(resta(n, m),m)) fi .
   eq modulo(cero, cero) = NODEFINIDO .
   eq modulo(cero, n) = cero .
   eq modulo(n, cero) = NODEFINIDO .
   eq modulo(n, m) = if esMayor(m, n) then n else modulo(resta(n, m),m) fi .
   eq mitad(n) = division(n,sucesor(sucesor(cero))) .
   eq esPar(cero) = true .
   eq esPar(n) = if n == sucesor(cero) then false else esPar(resta(n,sucesor(sucesor(cero)))) fi .
endfm


************** NOMBRE ***************
fmod VOCAL is

************** CONJUNTOS ************
	protecting BOOL .
	sort V .

************** SINTAXIS *************
	ops A E I O U : -> V .
	op esIgual : V V -> Bool .
	op esDistinta : V V -> Bool .
	op esMenor : V V -> Bool .

************** SEMANTICA ************
 var v w : V .

	eq esIgual(v, v) = true .
	eq esIgual(v, w) = false .
	eq esDistinta(v, w) = not esIgual(v, w) .
	eq esMenor(v, v) = false .
	eq esMenor(U, v) = false . 
	eq esMenor(A, v) = true . 
	eq esMenor(O, U) = true . 
	eq esMenor(O, v) = false . 
	eq esMenor(I, U) = true . 
	eq esMenor(I, O) = true . 
	eq esMenor(I, v) = false . 
	eq esMenor(E, A) = false . 
	eq esMenor(E, v) = true .

endfm


************** NOMBRE ***************
fmod ARBOL is

************** CONJUNTOS ************
   protecting BOOL .
   protecting NATURAL .
   protecting VOCAL .
   sort AB .

************* SINTAXIS ************* 
   op arbolVacio : -> AB .
   op esVacio : AB -> Bool .
   op construir : V AB AB -> AB .
   op construirRaiz : V -> AB .
   op altura : AB -> N .
   op numNodos : AB -> N .
 
************* SEMANTICA ************ 
   var v w : V .
   var a a1 a2 : AB .
 
   eq esVacio(arbolVacio) = true .
   eq esVacio(construir(v, a1, a2)) = false .
   eq construirRaiz(v) = construir(v, arbolVacio, arbolVacio) .
   eq altura(arbolVacio) = cero .
   eq altura(construir(v, arbolVacio, arbolVacio)) = sucesor(cero) .
   eq altura(construir(v, a, arbolVacio)) = sucesor(altura(a)) .
   eq altura(construir(v, arbolVacio, a)) = sucesor(altura(a)) .
   eq altura(construir(v, a1, a2)) = sucesor(maximo(altura(a1),altura(a2))) .
   eq numNodos(arbolVacio) = cero .
   eq numNodos(construir(v, a1, a2)) = sucesor(suma(numNodos(a1),numNodos(a2))) .

endfm